// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: public/grpc/v1/fujin.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Header
type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Header) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Connect request - must be sent first to initialize the stream
type ConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	StreamId      string                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // Used as transactional ID for Kafka
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ConnectRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

// Connect response
type ConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ConnectResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Produce request
type ProduceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Message       []byte                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProduceRequest) Reset() {
	*x = ProduceRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceRequest) ProtoMessage() {}

func (x *ProduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceRequest.ProtoReflect.Descriptor instead.
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{3}
}

func (x *ProduceRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ProduceRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ProduceRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

// Produce response
type ProduceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProduceResponse) Reset() {
	*x = ProduceResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceResponse) ProtoMessage() {}

func (x *ProduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceResponse.ProtoReflect.Descriptor instead.
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{4}
}

func (x *ProduceResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ProduceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// HProduceRequest - produce with headers
type HProduceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Headers       []*Header              `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Message       []byte                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HProduceRequest) Reset() {
	*x = HProduceRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HProduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HProduceRequest) ProtoMessage() {}

func (x *HProduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HProduceRequest.ProtoReflect.Descriptor instead.
func (*HProduceRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{5}
}

func (x *HProduceRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *HProduceRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *HProduceRequest) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HProduceRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

// HProduceResponse
type HProduceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HProduceResponse) Reset() {
	*x = HProduceResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HProduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HProduceResponse) ProtoMessage() {}

func (x *HProduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HProduceResponse.ProtoReflect.Descriptor instead.
func (*HProduceResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{6}
}

func (x *HProduceResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *HProduceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// BeginTxRequest - begin transaction
type BeginTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginTxRequest) Reset() {
	*x = BeginTxRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTxRequest) ProtoMessage() {}

func (x *BeginTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTxRequest.ProtoReflect.Descriptor instead.
func (*BeginTxRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{7}
}

func (x *BeginTxRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

// BeginTxResponse
type BeginTxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeginTxResponse) Reset() {
	*x = BeginTxResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeginTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTxResponse) ProtoMessage() {}

func (x *BeginTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTxResponse.ProtoReflect.Descriptor instead.
func (*BeginTxResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{8}
}

func (x *BeginTxResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *BeginTxResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// CommitTxRequest - commit transaction
type CommitTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitTxRequest) Reset() {
	*x = CommitTxRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTxRequest) ProtoMessage() {}

func (x *CommitTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTxRequest.ProtoReflect.Descriptor instead.
func (*CommitTxRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{9}
}

func (x *CommitTxRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

// CommitTxResponse
type CommitTxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitTxResponse) Reset() {
	*x = CommitTxResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTxResponse) ProtoMessage() {}

func (x *CommitTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTxResponse.ProtoReflect.Descriptor instead.
func (*CommitTxResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{10}
}

func (x *CommitTxResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *CommitTxResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// RollbackTxRequest - rollback transaction
type RollbackTxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackTxRequest) Reset() {
	*x = RollbackTxRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackTxRequest) ProtoMessage() {}

func (x *RollbackTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackTxRequest.ProtoReflect.Descriptor instead.
func (*RollbackTxRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{11}
}

func (x *RollbackTxRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

// RollbackTxResponse
type RollbackTxResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackTxResponse) Reset() {
	*x = RollbackTxResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackTxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackTxResponse) ProtoMessage() {}

func (x *RollbackTxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackTxResponse.ProtoReflect.Descriptor instead.
func (*RollbackTxResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{12}
}

func (x *RollbackTxResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *RollbackTxResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Subscribe request
type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	AutoCommit    bool                   `protobuf:"varint,3,opt,name=auto_commit,json=autoCommit,proto3" json:"auto_commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{13}
}

func (x *SubscribeRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *SubscribeRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest) GetAutoCommit() bool {
	if x != nil {
		return x.AutoCommit
	}
	return false
}

// Subscribe response
type SubscribeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"` // Limited to 0-255 (byte) to match native protocol, but protobuf requires uint32
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{14}
}

func (x *SubscribeResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *SubscribeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SubscribeResponse) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// HSubscribe request - subscribe with headers support
type HSubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	AutoCommit    bool                   `protobuf:"varint,3,opt,name=auto_commit,json=autoCommit,proto3" json:"auto_commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HSubscribeRequest) Reset() {
	*x = HSubscribeRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSubscribeRequest) ProtoMessage() {}

func (x *HSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSubscribeRequest.ProtoReflect.Descriptor instead.
func (*HSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{15}
}

func (x *HSubscribeRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *HSubscribeRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *HSubscribeRequest) GetAutoCommit() bool {
	if x != nil {
		return x.AutoCommit
	}
	return false
}

// HSubscribe response
type HSubscribeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"` // Limited to 0-255 (byte) to match native protocol, but protobuf requires uint32
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HSubscribeResponse) Reset() {
	*x = HSubscribeResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HSubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HSubscribeResponse) ProtoMessage() {}

func (x *HSubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HSubscribeResponse.ProtoReflect.Descriptor instead.
func (*HSubscribeResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{16}
}

func (x *HSubscribeResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *HSubscribeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HSubscribeResponse) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Unsubscribe request
type UnsubscribeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{17}
}

func (x *UnsubscribeRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *UnsubscribeRequest) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Unsubscribe response
type UnsubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeResponse) Reset() {
	*x = UnsubscribeResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeResponse) ProtoMessage() {}

func (x *UnsubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{18}
}

func (x *UnsubscribeResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *UnsubscribeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Message delivery
type Message struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId uint32                 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	MessageId      []byte                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Payload        []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{19}
}

func (x *Message) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *Message) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// HMessage - message delivery with headers
type HMessage struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId uint32                 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	MessageId      []byte                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Payload        []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers        []*Header              `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HMessage) Reset() {
	*x = HMessage{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMessage) ProtoMessage() {}

func (x *HMessage) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMessage.ProtoReflect.Descriptor instead.
func (*HMessage) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{20}
}

func (x *HMessage) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *HMessage) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *HMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *HMessage) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

// FetchRequest - request a batch of messages (pull-based)
type FetchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	AutoCommit    bool                   `protobuf:"varint,3,opt,name=auto_commit,json=autoCommit,proto3" json:"auto_commit,omitempty"`
	BatchSize     uint32                 `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"` // Number of messages to fetch
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{21}
}

func (x *FetchRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *FetchRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *FetchRequest) GetAutoCommit() bool {
	if x != nil {
		return x.AutoCommit
	}
	return false
}

func (x *FetchRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// FetchResponse - response with a batch of messages
type FetchResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"` // Subscription ID for ack/nack (reused across fetches)
	Messages       []*FetchMessage        `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FetchResponse) Reset() {
	*x = FetchResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResponse) ProtoMessage() {}

func (x *FetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResponse.ProtoReflect.Descriptor instead.
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{22}
}

func (x *FetchResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *FetchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FetchResponse) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *FetchResponse) GetMessages() []*FetchMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// FetchMessage - message returned by Fetch
type FetchMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchMessage) Reset() {
	*x = FetchMessage{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMessage) ProtoMessage() {}

func (x *FetchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMessage.ProtoReflect.Descriptor instead.
func (*FetchMessage) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{23}
}

func (x *FetchMessage) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *FetchMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// HFetchRequest - request a batch of messages with headers (pull-based)
type HFetchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	AutoCommit    bool                   `protobuf:"varint,3,opt,name=auto_commit,json=autoCommit,proto3" json:"auto_commit,omitempty"`
	BatchSize     uint32                 `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"` // Number of messages to fetch
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HFetchRequest) Reset() {
	*x = HFetchRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HFetchRequest) ProtoMessage() {}

func (x *HFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HFetchRequest.ProtoReflect.Descriptor instead.
func (*HFetchRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{24}
}

func (x *HFetchRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *HFetchRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *HFetchRequest) GetAutoCommit() bool {
	if x != nil {
		return x.AutoCommit
	}
	return false
}

func (x *HFetchRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

// HFetchResponse - response with a batch of messages with headers
type HFetchResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"` // Subscription ID for ack/nack (reused across fetches)
	Messages       []*HFetchMessage       `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HFetchResponse) Reset() {
	*x = HFetchResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HFetchResponse) ProtoMessage() {}

func (x *HFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HFetchResponse.ProtoReflect.Descriptor instead.
func (*HFetchResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{25}
}

func (x *HFetchResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *HFetchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HFetchResponse) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *HFetchResponse) GetMessages() []*HFetchMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

// HFetchMessage - message with headers returned by HFetch
type HFetchMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers       []*Header              `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HFetchMessage) Reset() {
	*x = HFetchMessage{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HFetchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HFetchMessage) ProtoMessage() {}

func (x *HFetchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HFetchMessage.ProtoReflect.Descriptor instead.
func (*HFetchMessage) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{26}
}

func (x *HFetchMessage) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *HFetchMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *HFetchMessage) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Ack request
type AckRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	MessageIds     [][]byte               `protobuf:"bytes,2,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{27}
}

func (x *AckRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *AckRequest) GetMessageIds() [][]byte {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *AckRequest) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Ack response with per-message results
type AckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`     // General error
	Results       []*AckMessageResult    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"` // Per-message results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{28}
}

func (x *AckResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *AckResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AckResponse) GetResults() []*AckMessageResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Ack result for individual message
type AckMessageResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Error for this specific message (empty if success)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckMessageResult) Reset() {
	*x = AckMessageResult{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckMessageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMessageResult) ProtoMessage() {}

func (x *AckMessageResult) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMessageResult.ProtoReflect.Descriptor instead.
func (*AckMessageResult) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{29}
}

func (x *AckMessageResult) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *AckMessageResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Nack request
type NackRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	MessageIds     [][]byte               `protobuf:"bytes,2,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NackRequest) Reset() {
	*x = NackRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackRequest) ProtoMessage() {}

func (x *NackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackRequest.ProtoReflect.Descriptor instead.
func (*NackRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{30}
}

func (x *NackRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *NackRequest) GetMessageIds() [][]byte {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *NackRequest) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Nack response with per-message results
type NackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`     // General error
	Results       []*NackMessageResult   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"` // Per-message results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackResponse) Reset() {
	*x = NackResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackResponse) ProtoMessage() {}

func (x *NackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackResponse.ProtoReflect.Descriptor instead.
func (*NackResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{31}
}

func (x *NackResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *NackResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *NackResponse) GetResults() []*NackMessageResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Nack result for individual message
type NackMessageResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackMessageResult) Reset() {
	*x = NackMessageResult{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackMessageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackMessageResult) ProtoMessage() {}

func (x *NackMessageResult) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackMessageResult.ProtoReflect.Descriptor instead.
func (*NackMessageResult) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{32}
}

func (x *NackMessageResult) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *NackMessageResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Union type for all requests
type FujinRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*FujinRequest_Connect
	//	*FujinRequest_Produce
	//	*FujinRequest_Subscribe
	//	*FujinRequest_Unsubscribe
	//	*FujinRequest_Ack
	//	*FujinRequest_Nack
	//	*FujinRequest_Hproduce
	//	*FujinRequest_Hsubscribe
	//	*FujinRequest_Fetch
	//	*FujinRequest_Hfetch
	//	*FujinRequest_BeginTx
	//	*FujinRequest_CommitTx
	//	*FujinRequest_RollbackTx
	Request       isFujinRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FujinRequest) Reset() {
	*x = FujinRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FujinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FujinRequest) ProtoMessage() {}

func (x *FujinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FujinRequest.ProtoReflect.Descriptor instead.
func (*FujinRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{33}
}

func (x *FujinRequest) GetRequest() isFujinRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FujinRequest) GetConnect() *ConnectRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FujinRequest) GetProduce() *ProduceRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Produce); ok {
			return x.Produce
		}
	}
	return nil
}

func (x *FujinRequest) GetSubscribe() *SubscribeRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *FujinRequest) GetUnsubscribe() *UnsubscribeRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

func (x *FujinRequest) GetAck() *AckRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *FujinRequest) GetNack() *NackRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Nack); ok {
			return x.Nack
		}
	}
	return nil
}

func (x *FujinRequest) GetHproduce() *HProduceRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Hproduce); ok {
			return x.Hproduce
		}
	}
	return nil
}

func (x *FujinRequest) GetHsubscribe() *HSubscribeRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Hsubscribe); ok {
			return x.Hsubscribe
		}
	}
	return nil
}

func (x *FujinRequest) GetFetch() *FetchRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Fetch); ok {
			return x.Fetch
		}
	}
	return nil
}

func (x *FujinRequest) GetHfetch() *HFetchRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Hfetch); ok {
			return x.Hfetch
		}
	}
	return nil
}

func (x *FujinRequest) GetBeginTx() *BeginTxRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_BeginTx); ok {
			return x.BeginTx
		}
	}
	return nil
}

func (x *FujinRequest) GetCommitTx() *CommitTxRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_CommitTx); ok {
			return x.CommitTx
		}
	}
	return nil
}

func (x *FujinRequest) GetRollbackTx() *RollbackTxRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_RollbackTx); ok {
			return x.RollbackTx
		}
	}
	return nil
}

type isFujinRequest_Request interface {
	isFujinRequest_Request()
}

type FujinRequest_Connect struct {
	Connect *ConnectRequest `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type FujinRequest_Produce struct {
	Produce *ProduceRequest `protobuf:"bytes,2,opt,name=produce,proto3,oneof"`
}

type FujinRequest_Subscribe struct {
	Subscribe *SubscribeRequest `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

type FujinRequest_Unsubscribe struct {
	Unsubscribe *UnsubscribeRequest `protobuf:"bytes,4,opt,name=unsubscribe,proto3,oneof"`
}

type FujinRequest_Ack struct {
	Ack *AckRequest `protobuf:"bytes,5,opt,name=ack,proto3,oneof"`
}

type FujinRequest_Nack struct {
	Nack *NackRequest `protobuf:"bytes,6,opt,name=nack,proto3,oneof"`
}

type FujinRequest_Hproduce struct {
	Hproduce *HProduceRequest `protobuf:"bytes,7,opt,name=hproduce,proto3,oneof"`
}

type FujinRequest_Hsubscribe struct {
	Hsubscribe *HSubscribeRequest `protobuf:"bytes,8,opt,name=hsubscribe,proto3,oneof"`
}

type FujinRequest_Fetch struct {
	Fetch *FetchRequest `protobuf:"bytes,9,opt,name=fetch,proto3,oneof"`
}

type FujinRequest_Hfetch struct {
	Hfetch *HFetchRequest `protobuf:"bytes,10,opt,name=hfetch,proto3,oneof"`
}

type FujinRequest_BeginTx struct {
	BeginTx *BeginTxRequest `protobuf:"bytes,11,opt,name=begin_tx,json=beginTx,proto3,oneof"`
}

type FujinRequest_CommitTx struct {
	CommitTx *CommitTxRequest `protobuf:"bytes,12,opt,name=commit_tx,json=commitTx,proto3,oneof"`
}

type FujinRequest_RollbackTx struct {
	RollbackTx *RollbackTxRequest `protobuf:"bytes,13,opt,name=rollback_tx,json=rollbackTx,proto3,oneof"`
}

func (*FujinRequest_Connect) isFujinRequest_Request() {}

func (*FujinRequest_Produce) isFujinRequest_Request() {}

func (*FujinRequest_Subscribe) isFujinRequest_Request() {}

func (*FujinRequest_Unsubscribe) isFujinRequest_Request() {}

func (*FujinRequest_Ack) isFujinRequest_Request() {}

func (*FujinRequest_Nack) isFujinRequest_Request() {}

func (*FujinRequest_Hproduce) isFujinRequest_Request() {}

func (*FujinRequest_Hsubscribe) isFujinRequest_Request() {}

func (*FujinRequest_Fetch) isFujinRequest_Request() {}

func (*FujinRequest_Hfetch) isFujinRequest_Request() {}

func (*FujinRequest_BeginTx) isFujinRequest_Request() {}

func (*FujinRequest_CommitTx) isFujinRequest_Request() {}

func (*FujinRequest_RollbackTx) isFujinRequest_Request() {}

// Union type for all responses
type FujinResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FujinResponse_Connect
	//	*FujinResponse_Produce
	//	*FujinResponse_Subscribe
	//	*FujinResponse_Unsubscribe
	//	*FujinResponse_Message
	//	*FujinResponse_Ack
	//	*FujinResponse_Nack
	//	*FujinResponse_Hproduce
	//	*FujinResponse_Hmessage
	//	*FujinResponse_Hsubscribe
	//	*FujinResponse_Fetch
	//	*FujinResponse_Hfetch
	//	*FujinResponse_BeginTx
	//	*FujinResponse_CommitTx
	//	*FujinResponse_RollbackTx
	Response      isFujinResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FujinResponse) Reset() {
	*x = FujinResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FujinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FujinResponse) ProtoMessage() {}

func (x *FujinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FujinResponse.ProtoReflect.Descriptor instead.
func (*FujinResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{34}
}

func (x *FujinResponse) GetResponse() isFujinResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FujinResponse) GetConnect() *ConnectResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FujinResponse) GetProduce() *ProduceResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Produce); ok {
			return x.Produce
		}
	}
	return nil
}

func (x *FujinResponse) GetSubscribe() *SubscribeResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *FujinResponse) GetUnsubscribe() *UnsubscribeResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

func (x *FujinResponse) GetMessage() *Message {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *FujinResponse) GetAck() *AckResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *FujinResponse) GetNack() *NackResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Nack); ok {
			return x.Nack
		}
	}
	return nil
}

func (x *FujinResponse) GetHproduce() *HProduceResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Hproduce); ok {
			return x.Hproduce
		}
	}
	return nil
}

func (x *FujinResponse) GetHmessage() *HMessage {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Hmessage); ok {
			return x.Hmessage
		}
	}
	return nil
}

func (x *FujinResponse) GetHsubscribe() *HSubscribeResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Hsubscribe); ok {
			return x.Hsubscribe
		}
	}
	return nil
}

func (x *FujinResponse) GetFetch() *FetchResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Fetch); ok {
			return x.Fetch
		}
	}
	return nil
}

func (x *FujinResponse) GetHfetch() *HFetchResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Hfetch); ok {
			return x.Hfetch
		}
	}
	return nil
}

func (x *FujinResponse) GetBeginTx() *BeginTxResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_BeginTx); ok {
			return x.BeginTx
		}
	}
	return nil
}

func (x *FujinResponse) GetCommitTx() *CommitTxResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_CommitTx); ok {
			return x.CommitTx
		}
	}
	return nil
}

func (x *FujinResponse) GetRollbackTx() *RollbackTxResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_RollbackTx); ok {
			return x.RollbackTx
		}
	}
	return nil
}

type isFujinResponse_Response interface {
	isFujinResponse_Response()
}

type FujinResponse_Connect struct {
	Connect *ConnectResponse `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type FujinResponse_Produce struct {
	Produce *ProduceResponse `protobuf:"bytes,2,opt,name=produce,proto3,oneof"`
}

type FujinResponse_Subscribe struct {
	Subscribe *SubscribeResponse `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

type FujinResponse_Unsubscribe struct {
	Unsubscribe *UnsubscribeResponse `protobuf:"bytes,4,opt,name=unsubscribe,proto3,oneof"`
}

type FujinResponse_Message struct {
	Message *Message `protobuf:"bytes,5,opt,name=message,proto3,oneof"`
}

type FujinResponse_Ack struct {
	Ack *AckResponse `protobuf:"bytes,6,opt,name=ack,proto3,oneof"`
}

type FujinResponse_Nack struct {
	Nack *NackResponse `protobuf:"bytes,7,opt,name=nack,proto3,oneof"`
}

type FujinResponse_Hproduce struct {
	Hproduce *HProduceResponse `protobuf:"bytes,8,opt,name=hproduce,proto3,oneof"`
}

type FujinResponse_Hmessage struct {
	Hmessage *HMessage `protobuf:"bytes,9,opt,name=hmessage,proto3,oneof"`
}

type FujinResponse_Hsubscribe struct {
	Hsubscribe *HSubscribeResponse `protobuf:"bytes,10,opt,name=hsubscribe,proto3,oneof"`
}

type FujinResponse_Fetch struct {
	Fetch *FetchResponse `protobuf:"bytes,11,opt,name=fetch,proto3,oneof"`
}

type FujinResponse_Hfetch struct {
	Hfetch *HFetchResponse `protobuf:"bytes,12,opt,name=hfetch,proto3,oneof"`
}

type FujinResponse_BeginTx struct {
	BeginTx *BeginTxResponse `protobuf:"bytes,13,opt,name=begin_tx,json=beginTx,proto3,oneof"`
}

type FujinResponse_CommitTx struct {
	CommitTx *CommitTxResponse `protobuf:"bytes,14,opt,name=commit_tx,json=commitTx,proto3,oneof"`
}

type FujinResponse_RollbackTx struct {
	RollbackTx *RollbackTxResponse `protobuf:"bytes,15,opt,name=rollback_tx,json=rollbackTx,proto3,oneof"`
}

func (*FujinResponse_Connect) isFujinResponse_Response() {}

func (*FujinResponse_Produce) isFujinResponse_Response() {}

func (*FujinResponse_Subscribe) isFujinResponse_Response() {}

func (*FujinResponse_Unsubscribe) isFujinResponse_Response() {}

func (*FujinResponse_Message) isFujinResponse_Response() {}

func (*FujinResponse_Ack) isFujinResponse_Response() {}

func (*FujinResponse_Nack) isFujinResponse_Response() {}

func (*FujinResponse_Hproduce) isFujinResponse_Response() {}

func (*FujinResponse_Hmessage) isFujinResponse_Response() {}

func (*FujinResponse_Hsubscribe) isFujinResponse_Response() {}

func (*FujinResponse_Fetch) isFujinResponse_Response() {}

func (*FujinResponse_Hfetch) isFujinResponse_Response() {}

func (*FujinResponse_BeginTx) isFujinResponse_Response() {}

func (*FujinResponse_CommitTx) isFujinResponse_Response() {}

func (*FujinResponse_RollbackTx) isFujinResponse_Response() {}

var File_public_grpc_v1_fujin_proto protoreflect.FileDescriptor

const file_public_grpc_v1_fujin_proto_rawDesc = "" +
	"\n" +
	"\x1apublic/grpc/v1/fujin.proto\x12\bfujin.v1\"0\n" +
	"\x06Header\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\"T\n" +
	"\x0eConnectRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\tR\bstreamId\"N\n" +
	"\x0fConnectResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"g\n" +
	"\x0eProduceRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x18\n" +
	"\amessage\x18\x03 \x01(\fR\amessage\"N\n" +
	"\x0fProduceResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x94\x01\n" +
	"\x0fHProduceRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12*\n" +
	"\aheaders\x18\x03 \x03(\v2\x10.fujin.v1.HeaderR\aheaders\x12\x18\n" +
	"\amessage\x18\x04 \x01(\fR\amessage\"O\n" +
	"\x10HProduceResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"7\n" +
	"\x0eBeginTxRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\"N\n" +
	"\x0fBeginTxResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"8\n" +
	"\x0fCommitTxRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\"O\n" +
	"\x10CommitTxResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\":\n" +
	"\x11RollbackTxRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\"Q\n" +
	"\x12RollbackTxResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"p\n" +
	"\x10SubscribeRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1f\n" +
	"\vauto_commit\x18\x03 \x01(\bR\n" +
	"autoCommit\"y\n" +
	"\x11SubscribeResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"q\n" +
	"\x11HSubscribeRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1f\n" +
	"\vauto_commit\x18\x03 \x01(\bR\n" +
	"autoCommit\"z\n" +
	"\x12HSubscribeResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"d\n" +
	"\x12UnsubscribeRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12'\n" +
	"\x0fsubscription_id\x18\x02 \x01(\rR\x0esubscriptionId\"R\n" +
	"\x13UnsubscribeResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"k\n" +
	"\aMessage\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\rR\x0esubscriptionId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\fR\tmessageId\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"\x98\x01\n" +
	"\bHMessage\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\rR\x0esubscriptionId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\fR\tmessageId\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x12*\n" +
	"\aheaders\x18\x04 \x03(\v2\x10.fujin.v1.HeaderR\aheaders\"\x8b\x01\n" +
	"\fFetchRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1f\n" +
	"\vauto_commit\x18\x03 \x01(\bR\n" +
	"autoCommit\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x04 \x01(\rR\tbatchSize\"\xa9\x01\n" +
	"\rFetchResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\x122\n" +
	"\bmessages\x18\x04 \x03(\v2\x16.fujin.v1.FetchMessageR\bmessages\"G\n" +
	"\fFetchMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\"\x8c\x01\n" +
	"\rHFetchRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1f\n" +
	"\vauto_commit\x18\x03 \x01(\bR\n" +
	"autoCommit\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x04 \x01(\rR\tbatchSize\"\xab\x01\n" +
	"\x0eHFetchResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\x123\n" +
	"\bmessages\x18\x04 \x03(\v2\x17.fujin.v1.HFetchMessageR\bmessages\"t\n" +
	"\rHFetchMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12*\n" +
	"\aheaders\x18\x03 \x03(\v2\x10.fujin.v1.HeaderR\aheaders\"}\n" +
	"\n" +
	"AckRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x1f\n" +
	"\vmessage_ids\x18\x02 \x03(\fR\n" +
	"messageIds\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"\x80\x01\n" +
	"\vAckResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x124\n" +
	"\aresults\x18\x03 \x03(\v2\x1a.fujin.v1.AckMessageResultR\aresults\"G\n" +
	"\x10AckMessageResult\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"~\n" +
	"\vNackRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x1f\n" +
	"\vmessage_ids\x18\x02 \x03(\fR\n" +
	"messageIds\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"\x82\x01\n" +
	"\fNackResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x125\n" +
	"\aresults\x18\x03 \x03(\v2\x1b.fujin.v1.NackMessageResultR\aresults\"H\n" +
	"\x11NackMessageResult\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\xe6\x05\n" +
	"\fFujinRequest\x124\n" +
	"\aconnect\x18\x01 \x01(\v2\x18.fujin.v1.ConnectRequestH\x00R\aconnect\x124\n" +
	"\aproduce\x18\x02 \x01(\v2\x18.fujin.v1.ProduceRequestH\x00R\aproduce\x12:\n" +
	"\tsubscribe\x18\x03 \x01(\v2\x1a.fujin.v1.SubscribeRequestH\x00R\tsubscribe\x12@\n" +
	"\vunsubscribe\x18\x04 \x01(\v2\x1c.fujin.v1.UnsubscribeRequestH\x00R\vunsubscribe\x12(\n" +
	"\x03ack\x18\x05 \x01(\v2\x14.fujin.v1.AckRequestH\x00R\x03ack\x12+\n" +
	"\x04nack\x18\x06 \x01(\v2\x15.fujin.v1.NackRequestH\x00R\x04nack\x127\n" +
	"\bhproduce\x18\a \x01(\v2\x19.fujin.v1.HProduceRequestH\x00R\bhproduce\x12=\n" +
	"\n" +
	"hsubscribe\x18\b \x01(\v2\x1b.fujin.v1.HSubscribeRequestH\x00R\n" +
	"hsubscribe\x12.\n" +
	"\x05fetch\x18\t \x01(\v2\x16.fujin.v1.FetchRequestH\x00R\x05fetch\x121\n" +
	"\x06hfetch\x18\n" +
	" \x01(\v2\x17.fujin.v1.HFetchRequestH\x00R\x06hfetch\x125\n" +
	"\bbegin_tx\x18\v \x01(\v2\x18.fujin.v1.BeginTxRequestH\x00R\abeginTx\x128\n" +
	"\tcommit_tx\x18\f \x01(\v2\x19.fujin.v1.CommitTxRequestH\x00R\bcommitTx\x12>\n" +
	"\vrollback_tx\x18\r \x01(\v2\x1b.fujin.v1.RollbackTxRequestH\x00R\n" +
	"rollbackTxB\t\n" +
	"\arequest\"\xd6\x06\n" +
	"\rFujinResponse\x125\n" +
	"\aconnect\x18\x01 \x01(\v2\x19.fujin.v1.ConnectResponseH\x00R\aconnect\x125\n" +
	"\aproduce\x18\x02 \x01(\v2\x19.fujin.v1.ProduceResponseH\x00R\aproduce\x12;\n" +
	"\tsubscribe\x18\x03 \x01(\v2\x1b.fujin.v1.SubscribeResponseH\x00R\tsubscribe\x12A\n" +
	"\vunsubscribe\x18\x04 \x01(\v2\x1d.fujin.v1.UnsubscribeResponseH\x00R\vunsubscribe\x12-\n" +
	"\amessage\x18\x05 \x01(\v2\x11.fujin.v1.MessageH\x00R\amessage\x12)\n" +
	"\x03ack\x18\x06 \x01(\v2\x15.fujin.v1.AckResponseH\x00R\x03ack\x12,\n" +
	"\x04nack\x18\a \x01(\v2\x16.fujin.v1.NackResponseH\x00R\x04nack\x128\n" +
	"\bhproduce\x18\b \x01(\v2\x1a.fujin.v1.HProduceResponseH\x00R\bhproduce\x120\n" +
	"\bhmessage\x18\t \x01(\v2\x12.fujin.v1.HMessageH\x00R\bhmessage\x12>\n" +
	"\n" +
	"hsubscribe\x18\n" +
	" \x01(\v2\x1c.fujin.v1.HSubscribeResponseH\x00R\n" +
	"hsubscribe\x12/\n" +
	"\x05fetch\x18\v \x01(\v2\x17.fujin.v1.FetchResponseH\x00R\x05fetch\x122\n" +
	"\x06hfetch\x18\f \x01(\v2\x18.fujin.v1.HFetchResponseH\x00R\x06hfetch\x126\n" +
	"\bbegin_tx\x18\r \x01(\v2\x19.fujin.v1.BeginTxResponseH\x00R\abeginTx\x129\n" +
	"\tcommit_tx\x18\x0e \x01(\v2\x1a.fujin.v1.CommitTxResponseH\x00R\bcommitTx\x12?\n" +
	"\vrollback_tx\x18\x0f \x01(\v2\x1c.fujin.v1.RollbackTxResponseH\x00R\n" +
	"rollbackTxB\n" +
	"\n" +
	"\bresponse2M\n" +
	"\fFujinService\x12=\n" +
	"\x06Stream\x12\x16.fujin.v1.FujinRequest\x1a\x17.fujin.v1.FujinResponse(\x010\x01B/Z-github.com/ValerySidorin/fujin/public/grpc/v1b\x06proto3"

var (
	file_public_grpc_v1_fujin_proto_rawDescOnce sync.Once
	file_public_grpc_v1_fujin_proto_rawDescData []byte
)

func file_public_grpc_v1_fujin_proto_rawDescGZIP() []byte {
	file_public_grpc_v1_fujin_proto_rawDescOnce.Do(func() {
		file_public_grpc_v1_fujin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_public_grpc_v1_fujin_proto_rawDesc), len(file_public_grpc_v1_fujin_proto_rawDesc)))
	})
	return file_public_grpc_v1_fujin_proto_rawDescData
}

var file_public_grpc_v1_fujin_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_public_grpc_v1_fujin_proto_goTypes = []any{
	(*Header)(nil),              // 0: fujin.v1.Header
	(*ConnectRequest)(nil),      // 1: fujin.v1.ConnectRequest
	(*ConnectResponse)(nil),     // 2: fujin.v1.ConnectResponse
	(*ProduceRequest)(nil),      // 3: fujin.v1.ProduceRequest
	(*ProduceResponse)(nil),     // 4: fujin.v1.ProduceResponse
	(*HProduceRequest)(nil),     // 5: fujin.v1.HProduceRequest
	(*HProduceResponse)(nil),    // 6: fujin.v1.HProduceResponse
	(*BeginTxRequest)(nil),      // 7: fujin.v1.BeginTxRequest
	(*BeginTxResponse)(nil),     // 8: fujin.v1.BeginTxResponse
	(*CommitTxRequest)(nil),     // 9: fujin.v1.CommitTxRequest
	(*CommitTxResponse)(nil),    // 10: fujin.v1.CommitTxResponse
	(*RollbackTxRequest)(nil),   // 11: fujin.v1.RollbackTxRequest
	(*RollbackTxResponse)(nil),  // 12: fujin.v1.RollbackTxResponse
	(*SubscribeRequest)(nil),    // 13: fujin.v1.SubscribeRequest
	(*SubscribeResponse)(nil),   // 14: fujin.v1.SubscribeResponse
	(*HSubscribeRequest)(nil),   // 15: fujin.v1.HSubscribeRequest
	(*HSubscribeResponse)(nil),  // 16: fujin.v1.HSubscribeResponse
	(*UnsubscribeRequest)(nil),  // 17: fujin.v1.UnsubscribeRequest
	(*UnsubscribeResponse)(nil), // 18: fujin.v1.UnsubscribeResponse
	(*Message)(nil),             // 19: fujin.v1.Message
	(*HMessage)(nil),            // 20: fujin.v1.HMessage
	(*FetchRequest)(nil),        // 21: fujin.v1.FetchRequest
	(*FetchResponse)(nil),       // 22: fujin.v1.FetchResponse
	(*FetchMessage)(nil),        // 23: fujin.v1.FetchMessage
	(*HFetchRequest)(nil),       // 24: fujin.v1.HFetchRequest
	(*HFetchResponse)(nil),      // 25: fujin.v1.HFetchResponse
	(*HFetchMessage)(nil),       // 26: fujin.v1.HFetchMessage
	(*AckRequest)(nil),          // 27: fujin.v1.AckRequest
	(*AckResponse)(nil),         // 28: fujin.v1.AckResponse
	(*AckMessageResult)(nil),    // 29: fujin.v1.AckMessageResult
	(*NackRequest)(nil),         // 30: fujin.v1.NackRequest
	(*NackResponse)(nil),        // 31: fujin.v1.NackResponse
	(*NackMessageResult)(nil),   // 32: fujin.v1.NackMessageResult
	(*FujinRequest)(nil),        // 33: fujin.v1.FujinRequest
	(*FujinResponse)(nil),       // 34: fujin.v1.FujinResponse
}
var file_public_grpc_v1_fujin_proto_depIdxs = []int32{
	0,  // 0: fujin.v1.HProduceRequest.headers:type_name -> fujin.v1.Header
	0,  // 1: fujin.v1.HMessage.headers:type_name -> fujin.v1.Header
	23, // 2: fujin.v1.FetchResponse.messages:type_name -> fujin.v1.FetchMessage
	26, // 3: fujin.v1.HFetchResponse.messages:type_name -> fujin.v1.HFetchMessage
	0,  // 4: fujin.v1.HFetchMessage.headers:type_name -> fujin.v1.Header
	29, // 5: fujin.v1.AckResponse.results:type_name -> fujin.v1.AckMessageResult
	32, // 6: fujin.v1.NackResponse.results:type_name -> fujin.v1.NackMessageResult
	1,  // 7: fujin.v1.FujinRequest.connect:type_name -> fujin.v1.ConnectRequest
	3,  // 8: fujin.v1.FujinRequest.produce:type_name -> fujin.v1.ProduceRequest
	13, // 9: fujin.v1.FujinRequest.subscribe:type_name -> fujin.v1.SubscribeRequest
	17, // 10: fujin.v1.FujinRequest.unsubscribe:type_name -> fujin.v1.UnsubscribeRequest
	27, // 11: fujin.v1.FujinRequest.ack:type_name -> fujin.v1.AckRequest
	30, // 12: fujin.v1.FujinRequest.nack:type_name -> fujin.v1.NackRequest
	5,  // 13: fujin.v1.FujinRequest.hproduce:type_name -> fujin.v1.HProduceRequest
	15, // 14: fujin.v1.FujinRequest.hsubscribe:type_name -> fujin.v1.HSubscribeRequest
	21, // 15: fujin.v1.FujinRequest.fetch:type_name -> fujin.v1.FetchRequest
	24, // 16: fujin.v1.FujinRequest.hfetch:type_name -> fujin.v1.HFetchRequest
	7,  // 17: fujin.v1.FujinRequest.begin_tx:type_name -> fujin.v1.BeginTxRequest
	9,  // 18: fujin.v1.FujinRequest.commit_tx:type_name -> fujin.v1.CommitTxRequest
	11, // 19: fujin.v1.FujinRequest.rollback_tx:type_name -> fujin.v1.RollbackTxRequest
	2,  // 20: fujin.v1.FujinResponse.connect:type_name -> fujin.v1.ConnectResponse
	4,  // 21: fujin.v1.FujinResponse.produce:type_name -> fujin.v1.ProduceResponse
	14, // 22: fujin.v1.FujinResponse.subscribe:type_name -> fujin.v1.SubscribeResponse
	18, // 23: fujin.v1.FujinResponse.unsubscribe:type_name -> fujin.v1.UnsubscribeResponse
	19, // 24: fujin.v1.FujinResponse.message:type_name -> fujin.v1.Message
	28, // 25: fujin.v1.FujinResponse.ack:type_name -> fujin.v1.AckResponse
	31, // 26: fujin.v1.FujinResponse.nack:type_name -> fujin.v1.NackResponse
	6,  // 27: fujin.v1.FujinResponse.hproduce:type_name -> fujin.v1.HProduceResponse
	20, // 28: fujin.v1.FujinResponse.hmessage:type_name -> fujin.v1.HMessage
	16, // 29: fujin.v1.FujinResponse.hsubscribe:type_name -> fujin.v1.HSubscribeResponse
	22, // 30: fujin.v1.FujinResponse.fetch:type_name -> fujin.v1.FetchResponse
	25, // 31: fujin.v1.FujinResponse.hfetch:type_name -> fujin.v1.HFetchResponse
	8,  // 32: fujin.v1.FujinResponse.begin_tx:type_name -> fujin.v1.BeginTxResponse
	10, // 33: fujin.v1.FujinResponse.commit_tx:type_name -> fujin.v1.CommitTxResponse
	12, // 34: fujin.v1.FujinResponse.rollback_tx:type_name -> fujin.v1.RollbackTxResponse
	33, // 35: fujin.v1.FujinService.Stream:input_type -> fujin.v1.FujinRequest
	34, // 36: fujin.v1.FujinService.Stream:output_type -> fujin.v1.FujinResponse
	36, // [36:37] is the sub-list for method output_type
	35, // [35:36] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_public_grpc_v1_fujin_proto_init() }
func file_public_grpc_v1_fujin_proto_init() {
	if File_public_grpc_v1_fujin_proto != nil {
		return
	}
	file_public_grpc_v1_fujin_proto_msgTypes[33].OneofWrappers = []any{
		(*FujinRequest_Connect)(nil),
		(*FujinRequest_Produce)(nil),
		(*FujinRequest_Subscribe)(nil),
		(*FujinRequest_Unsubscribe)(nil),
		(*FujinRequest_Ack)(nil),
		(*FujinRequest_Nack)(nil),
		(*FujinRequest_Hproduce)(nil),
		(*FujinRequest_Hsubscribe)(nil),
		(*FujinRequest_Fetch)(nil),
		(*FujinRequest_Hfetch)(nil),
		(*FujinRequest_BeginTx)(nil),
		(*FujinRequest_CommitTx)(nil),
		(*FujinRequest_RollbackTx)(nil),
	}
	file_public_grpc_v1_fujin_proto_msgTypes[34].OneofWrappers = []any{
		(*FujinResponse_Connect)(nil),
		(*FujinResponse_Produce)(nil),
		(*FujinResponse_Subscribe)(nil),
		(*FujinResponse_Unsubscribe)(nil),
		(*FujinResponse_Message)(nil),
		(*FujinResponse_Ack)(nil),
		(*FujinResponse_Nack)(nil),
		(*FujinResponse_Hproduce)(nil),
		(*FujinResponse_Hmessage)(nil),
		(*FujinResponse_Hsubscribe)(nil),
		(*FujinResponse_Fetch)(nil),
		(*FujinResponse_Hfetch)(nil),
		(*FujinResponse_BeginTx)(nil),
		(*FujinResponse_CommitTx)(nil),
		(*FujinResponse_RollbackTx)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_public_grpc_v1_fujin_proto_rawDesc), len(file_public_grpc_v1_fujin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_grpc_v1_fujin_proto_goTypes,
		DependencyIndexes: file_public_grpc_v1_fujin_proto_depIdxs,
		MessageInfos:      file_public_grpc_v1_fujin_proto_msgTypes,
	}.Build()
	File_public_grpc_v1_fujin_proto = out.File
	file_public_grpc_v1_fujin_proto_goTypes = nil
	file_public_grpc_v1_fujin_proto_depIdxs = nil
}
