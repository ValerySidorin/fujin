// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: public/grpc/v1/fujin.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Header
type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Header) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Connect request - must be sent first to initialize the stream
type ConnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	StreamId      string                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // Used as transactional ID for Kafka
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ConnectRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

// Connect response
type ConnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ConnectResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Produce request
type ProduceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Message       []byte                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProduceRequest) Reset() {
	*x = ProduceRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceRequest) ProtoMessage() {}

func (x *ProduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceRequest.ProtoReflect.Descriptor instead.
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{3}
}

func (x *ProduceRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ProduceRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ProduceRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

// Produce response
type ProduceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProduceResponse) Reset() {
	*x = ProduceResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProduceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceResponse) ProtoMessage() {}

func (x *ProduceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceResponse.ProtoReflect.Descriptor instead.
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{4}
}

func (x *ProduceResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *ProduceResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Subscribe request
type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	AutoCommit    bool                   `protobuf:"varint,3,opt,name=auto_commit,json=autoCommit,proto3" json:"auto_commit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *SubscribeRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubscribeRequest) GetAutoCommit() bool {
	if x != nil {
		return x.AutoCommit
	}
	return false
}

// Subscribe response
type SubscribeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error          string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"` // Limited to 0-255 (byte) to match native protocol, but protobuf requires uint32
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{6}
}

func (x *SubscribeResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *SubscribeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *SubscribeResponse) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Unsubscribe request
type UnsubscribeRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnsubscribeRequest) Reset() {
	*x = UnsubscribeRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRequest) ProtoMessage() {}

func (x *UnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{7}
}

func (x *UnsubscribeRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *UnsubscribeRequest) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Unsubscribe response
type UnsubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeResponse) Reset() {
	*x = UnsubscribeResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeResponse) ProtoMessage() {}

func (x *UnsubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{8}
}

func (x *UnsubscribeResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *UnsubscribeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Message delivery
type Message struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId uint32                 `protobuf:"varint,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	MessageId      []byte                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Payload        []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{9}
}

func (x *Message) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

func (x *Message) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Ack request
type AckRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	MessageIds     [][]byte               `protobuf:"bytes,2,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{10}
}

func (x *AckRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *AckRequest) GetMessageIds() [][]byte {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *AckRequest) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Ack response with per-message results
type AckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`     // General error
	Results       []*AckMessageResult    `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"` // Per-message results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{11}
}

func (x *AckResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *AckResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *AckResponse) GetResults() []*AckMessageResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Ack result for individual message
type AckMessageResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Error for this specific message (empty if success)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckMessageResult) Reset() {
	*x = AckMessageResult{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckMessageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckMessageResult) ProtoMessage() {}

func (x *AckMessageResult) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckMessageResult.ProtoReflect.Descriptor instead.
func (*AckMessageResult) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{12}
}

func (x *AckMessageResult) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *AckMessageResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Nack request
type NackRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId  uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	MessageIds     [][]byte               `protobuf:"bytes,2,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	SubscriptionId uint32                 `protobuf:"varint,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *NackRequest) Reset() {
	*x = NackRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackRequest) ProtoMessage() {}

func (x *NackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackRequest.ProtoReflect.Descriptor instead.
func (*NackRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{13}
}

func (x *NackRequest) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *NackRequest) GetMessageIds() [][]byte {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *NackRequest) GetSubscriptionId() uint32 {
	if x != nil {
		return x.SubscriptionId
	}
	return 0
}

// Nack response with per-message results
type NackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`     // General error
	Results       []*NackMessageResult   `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"` // Per-message results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackResponse) Reset() {
	*x = NackResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackResponse) ProtoMessage() {}

func (x *NackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackResponse.ProtoReflect.Descriptor instead.
func (*NackResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{14}
}

func (x *NackResponse) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *NackResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *NackResponse) GetResults() []*NackMessageResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Nack result for individual message
type NackMessageResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     []byte                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Error for this specific message (empty if success)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackMessageResult) Reset() {
	*x = NackMessageResult{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackMessageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackMessageResult) ProtoMessage() {}

func (x *NackMessageResult) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackMessageResult.ProtoReflect.Descriptor instead.
func (*NackMessageResult) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{15}
}

func (x *NackMessageResult) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *NackMessageResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Empty response
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CorrelationId uint32                 `protobuf:"varint,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{16}
}

func (x *Empty) GetCorrelationId() uint32 {
	if x != nil {
		return x.CorrelationId
	}
	return 0
}

func (x *Empty) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Union type for all requests
type FujinRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*FujinRequest_Connect
	//	*FujinRequest_Produce
	//	*FujinRequest_Subscribe
	//	*FujinRequest_Unsubscribe
	//	*FujinRequest_Ack
	//	*FujinRequest_Nack
	Request       isFujinRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FujinRequest) Reset() {
	*x = FujinRequest{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FujinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FujinRequest) ProtoMessage() {}

func (x *FujinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FujinRequest.ProtoReflect.Descriptor instead.
func (*FujinRequest) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{17}
}

func (x *FujinRequest) GetRequest() isFujinRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FujinRequest) GetConnect() *ConnectRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FujinRequest) GetProduce() *ProduceRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Produce); ok {
			return x.Produce
		}
	}
	return nil
}

func (x *FujinRequest) GetSubscribe() *SubscribeRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *FujinRequest) GetUnsubscribe() *UnsubscribeRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

func (x *FujinRequest) GetAck() *AckRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *FujinRequest) GetNack() *NackRequest {
	if x != nil {
		if x, ok := x.Request.(*FujinRequest_Nack); ok {
			return x.Nack
		}
	}
	return nil
}

type isFujinRequest_Request interface {
	isFujinRequest_Request()
}

type FujinRequest_Connect struct {
	Connect *ConnectRequest `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type FujinRequest_Produce struct {
	Produce *ProduceRequest `protobuf:"bytes,2,opt,name=produce,proto3,oneof"`
}

type FujinRequest_Subscribe struct {
	Subscribe *SubscribeRequest `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

type FujinRequest_Unsubscribe struct {
	Unsubscribe *UnsubscribeRequest `protobuf:"bytes,4,opt,name=unsubscribe,proto3,oneof"`
}

type FujinRequest_Ack struct {
	Ack *AckRequest `protobuf:"bytes,5,opt,name=ack,proto3,oneof"`
}

type FujinRequest_Nack struct {
	Nack *NackRequest `protobuf:"bytes,6,opt,name=nack,proto3,oneof"`
}

func (*FujinRequest_Connect) isFujinRequest_Request() {}

func (*FujinRequest_Produce) isFujinRequest_Request() {}

func (*FujinRequest_Subscribe) isFujinRequest_Request() {}

func (*FujinRequest_Unsubscribe) isFujinRequest_Request() {}

func (*FujinRequest_Ack) isFujinRequest_Request() {}

func (*FujinRequest_Nack) isFujinRequest_Request() {}

// Union type for all responses
type FujinResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FujinResponse_Connect
	//	*FujinResponse_Produce
	//	*FujinResponse_Subscribe
	//	*FujinResponse_Unsubscribe
	//	*FujinResponse_Message
	//	*FujinResponse_Ack
	//	*FujinResponse_Nack
	Response      isFujinResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FujinResponse) Reset() {
	*x = FujinResponse{}
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FujinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FujinResponse) ProtoMessage() {}

func (x *FujinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_public_grpc_v1_fujin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FujinResponse.ProtoReflect.Descriptor instead.
func (*FujinResponse) Descriptor() ([]byte, []int) {
	return file_public_grpc_v1_fujin_proto_rawDescGZIP(), []int{18}
}

func (x *FujinResponse) GetResponse() isFujinResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FujinResponse) GetConnect() *ConnectResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Connect); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *FujinResponse) GetProduce() *ProduceResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Produce); ok {
			return x.Produce
		}
	}
	return nil
}

func (x *FujinResponse) GetSubscribe() *SubscribeResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *FujinResponse) GetUnsubscribe() *UnsubscribeResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

func (x *FujinResponse) GetMessage() *Message {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *FujinResponse) GetAck() *AckResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *FujinResponse) GetNack() *NackResponse {
	if x != nil {
		if x, ok := x.Response.(*FujinResponse_Nack); ok {
			return x.Nack
		}
	}
	return nil
}

type isFujinResponse_Response interface {
	isFujinResponse_Response()
}

type FujinResponse_Connect struct {
	Connect *ConnectResponse `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type FujinResponse_Produce struct {
	Produce *ProduceResponse `protobuf:"bytes,2,opt,name=produce,proto3,oneof"`
}

type FujinResponse_Subscribe struct {
	Subscribe *SubscribeResponse `protobuf:"bytes,3,opt,name=subscribe,proto3,oneof"`
}

type FujinResponse_Unsubscribe struct {
	Unsubscribe *UnsubscribeResponse `protobuf:"bytes,4,opt,name=unsubscribe,proto3,oneof"`
}

type FujinResponse_Message struct {
	Message *Message `protobuf:"bytes,5,opt,name=message,proto3,oneof"`
}

type FujinResponse_Ack struct {
	Ack *AckResponse `protobuf:"bytes,6,opt,name=ack,proto3,oneof"`
}

type FujinResponse_Nack struct {
	Nack *NackResponse `protobuf:"bytes,7,opt,name=nack,proto3,oneof"`
}

func (*FujinResponse_Connect) isFujinResponse_Response() {}

func (*FujinResponse_Produce) isFujinResponse_Response() {}

func (*FujinResponse_Subscribe) isFujinResponse_Response() {}

func (*FujinResponse_Unsubscribe) isFujinResponse_Response() {}

func (*FujinResponse_Message) isFujinResponse_Response() {}

func (*FujinResponse_Ack) isFujinResponse_Response() {}

func (*FujinResponse_Nack) isFujinResponse_Response() {}

var File_public_grpc_v1_fujin_proto protoreflect.FileDescriptor

const file_public_grpc_v1_fujin_proto_rawDesc = "" +
	"\n" +
	"\x1apublic/grpc/v1/fujin.proto\x12\bfujin.v1\"0\n" +
	"\x06Header\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value\"T\n" +
	"\x0eConnectRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\tR\bstreamId\"N\n" +
	"\x0fConnectResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"g\n" +
	"\x0eProduceRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x18\n" +
	"\amessage\x18\x03 \x01(\fR\amessage\"N\n" +
	"\x0fProduceResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"p\n" +
	"\x10SubscribeRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x1f\n" +
	"\vauto_commit\x18\x03 \x01(\bR\n" +
	"autoCommit\"y\n" +
	"\x11SubscribeResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"d\n" +
	"\x12UnsubscribeRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12'\n" +
	"\x0fsubscription_id\x18\x02 \x01(\rR\x0esubscriptionId\"R\n" +
	"\x13UnsubscribeResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"k\n" +
	"\aMessage\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\rR\x0esubscriptionId\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\fR\tmessageId\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"}\n" +
	"\n" +
	"AckRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x1f\n" +
	"\vmessage_ids\x18\x02 \x03(\fR\n" +
	"messageIds\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"\x80\x01\n" +
	"\vAckResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x124\n" +
	"\aresults\x18\x03 \x03(\v2\x1a.fujin.v1.AckMessageResultR\aresults\"G\n" +
	"\x10AckMessageResult\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"~\n" +
	"\vNackRequest\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x1f\n" +
	"\vmessage_ids\x18\x02 \x03(\fR\n" +
	"messageIds\x12'\n" +
	"\x0fsubscription_id\x18\x03 \x01(\rR\x0esubscriptionId\"\x82\x01\n" +
	"\fNackResponse\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x125\n" +
	"\aresults\x18\x03 \x03(\v2\x1b.fujin.v1.NackMessageResultR\aresults\"H\n" +
	"\x11NackMessageResult\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\fR\tmessageId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"D\n" +
	"\x05Empty\x12%\n" +
	"\x0ecorrelation_id\x18\x01 \x01(\rR\rcorrelationId\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\xda\x02\n" +
	"\fFujinRequest\x124\n" +
	"\aconnect\x18\x01 \x01(\v2\x18.fujin.v1.ConnectRequestH\x00R\aconnect\x124\n" +
	"\aproduce\x18\x02 \x01(\v2\x18.fujin.v1.ProduceRequestH\x00R\aproduce\x12:\n" +
	"\tsubscribe\x18\x03 \x01(\v2\x1a.fujin.v1.SubscribeRequestH\x00R\tsubscribe\x12@\n" +
	"\vunsubscribe\x18\x04 \x01(\v2\x1c.fujin.v1.UnsubscribeRequestH\x00R\vunsubscribe\x12(\n" +
	"\x03ack\x18\x05 \x01(\v2\x14.fujin.v1.AckRequestH\x00R\x03ack\x12+\n" +
	"\x04nack\x18\x06 \x01(\v2\x15.fujin.v1.NackRequestH\x00R\x04nackB\t\n" +
	"\arequest\"\x91\x03\n" +
	"\rFujinResponse\x125\n" +
	"\aconnect\x18\x01 \x01(\v2\x19.fujin.v1.ConnectResponseH\x00R\aconnect\x125\n" +
	"\aproduce\x18\x02 \x01(\v2\x19.fujin.v1.ProduceResponseH\x00R\aproduce\x12;\n" +
	"\tsubscribe\x18\x03 \x01(\v2\x1b.fujin.v1.SubscribeResponseH\x00R\tsubscribe\x12A\n" +
	"\vunsubscribe\x18\x04 \x01(\v2\x1d.fujin.v1.UnsubscribeResponseH\x00R\vunsubscribe\x12-\n" +
	"\amessage\x18\x05 \x01(\v2\x11.fujin.v1.MessageH\x00R\amessage\x12)\n" +
	"\x03ack\x18\x06 \x01(\v2\x15.fujin.v1.AckResponseH\x00R\x03ack\x12,\n" +
	"\x04nack\x18\a \x01(\v2\x16.fujin.v1.NackResponseH\x00R\x04nackB\n" +
	"\n" +
	"\bresponse2M\n" +
	"\fFujinService\x12=\n" +
	"\x06Stream\x12\x16.fujin.v1.FujinRequest\x1a\x17.fujin.v1.FujinResponse(\x010\x01B/Z-github.com/ValerySidorin/fujin/public/grpc/v1b\x06proto3"

var (
	file_public_grpc_v1_fujin_proto_rawDescOnce sync.Once
	file_public_grpc_v1_fujin_proto_rawDescData []byte
)

func file_public_grpc_v1_fujin_proto_rawDescGZIP() []byte {
	file_public_grpc_v1_fujin_proto_rawDescOnce.Do(func() {
		file_public_grpc_v1_fujin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_public_grpc_v1_fujin_proto_rawDesc), len(file_public_grpc_v1_fujin_proto_rawDesc)))
	})
	return file_public_grpc_v1_fujin_proto_rawDescData
}

var file_public_grpc_v1_fujin_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_public_grpc_v1_fujin_proto_goTypes = []any{
	(*Header)(nil),              // 0: fujin.v1.Header
	(*ConnectRequest)(nil),      // 1: fujin.v1.ConnectRequest
	(*ConnectResponse)(nil),     // 2: fujin.v1.ConnectResponse
	(*ProduceRequest)(nil),      // 3: fujin.v1.ProduceRequest
	(*ProduceResponse)(nil),     // 4: fujin.v1.ProduceResponse
	(*SubscribeRequest)(nil),    // 5: fujin.v1.SubscribeRequest
	(*SubscribeResponse)(nil),   // 6: fujin.v1.SubscribeResponse
	(*UnsubscribeRequest)(nil),  // 7: fujin.v1.UnsubscribeRequest
	(*UnsubscribeResponse)(nil), // 8: fujin.v1.UnsubscribeResponse
	(*Message)(nil),             // 9: fujin.v1.Message
	(*AckRequest)(nil),          // 10: fujin.v1.AckRequest
	(*AckResponse)(nil),         // 11: fujin.v1.AckResponse
	(*AckMessageResult)(nil),    // 12: fujin.v1.AckMessageResult
	(*NackRequest)(nil),         // 13: fujin.v1.NackRequest
	(*NackResponse)(nil),        // 14: fujin.v1.NackResponse
	(*NackMessageResult)(nil),   // 15: fujin.v1.NackMessageResult
	(*Empty)(nil),               // 16: fujin.v1.Empty
	(*FujinRequest)(nil),        // 17: fujin.v1.FujinRequest
	(*FujinResponse)(nil),       // 18: fujin.v1.FujinResponse
}
var file_public_grpc_v1_fujin_proto_depIdxs = []int32{
	12, // 0: fujin.v1.AckResponse.results:type_name -> fujin.v1.AckMessageResult
	15, // 1: fujin.v1.NackResponse.results:type_name -> fujin.v1.NackMessageResult
	1,  // 2: fujin.v1.FujinRequest.connect:type_name -> fujin.v1.ConnectRequest
	3,  // 3: fujin.v1.FujinRequest.produce:type_name -> fujin.v1.ProduceRequest
	5,  // 4: fujin.v1.FujinRequest.subscribe:type_name -> fujin.v1.SubscribeRequest
	7,  // 5: fujin.v1.FujinRequest.unsubscribe:type_name -> fujin.v1.UnsubscribeRequest
	10, // 6: fujin.v1.FujinRequest.ack:type_name -> fujin.v1.AckRequest
	13, // 7: fujin.v1.FujinRequest.nack:type_name -> fujin.v1.NackRequest
	2,  // 8: fujin.v1.FujinResponse.connect:type_name -> fujin.v1.ConnectResponse
	4,  // 9: fujin.v1.FujinResponse.produce:type_name -> fujin.v1.ProduceResponse
	6,  // 10: fujin.v1.FujinResponse.subscribe:type_name -> fujin.v1.SubscribeResponse
	8,  // 11: fujin.v1.FujinResponse.unsubscribe:type_name -> fujin.v1.UnsubscribeResponse
	9,  // 12: fujin.v1.FujinResponse.message:type_name -> fujin.v1.Message
	11, // 13: fujin.v1.FujinResponse.ack:type_name -> fujin.v1.AckResponse
	14, // 14: fujin.v1.FujinResponse.nack:type_name -> fujin.v1.NackResponse
	17, // 15: fujin.v1.FujinService.Stream:input_type -> fujin.v1.FujinRequest
	18, // 16: fujin.v1.FujinService.Stream:output_type -> fujin.v1.FujinResponse
	16, // [16:17] is the sub-list for method output_type
	15, // [15:16] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_public_grpc_v1_fujin_proto_init() }
func file_public_grpc_v1_fujin_proto_init() {
	if File_public_grpc_v1_fujin_proto != nil {
		return
	}
	file_public_grpc_v1_fujin_proto_msgTypes[17].OneofWrappers = []any{
		(*FujinRequest_Connect)(nil),
		(*FujinRequest_Produce)(nil),
		(*FujinRequest_Subscribe)(nil),
		(*FujinRequest_Unsubscribe)(nil),
		(*FujinRequest_Ack)(nil),
		(*FujinRequest_Nack)(nil),
	}
	file_public_grpc_v1_fujin_proto_msgTypes[18].OneofWrappers = []any{
		(*FujinResponse_Connect)(nil),
		(*FujinResponse_Produce)(nil),
		(*FujinResponse_Subscribe)(nil),
		(*FujinResponse_Unsubscribe)(nil),
		(*FujinResponse_Message)(nil),
		(*FujinResponse_Ack)(nil),
		(*FujinResponse_Nack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_public_grpc_v1_fujin_proto_rawDesc), len(file_public_grpc_v1_fujin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_public_grpc_v1_fujin_proto_goTypes,
		DependencyIndexes: file_public_grpc_v1_fujin_proto_depIdxs,
		MessageInfos:      file_public_grpc_v1_fujin_proto_msgTypes,
	}.Build()
	File_public_grpc_v1_fujin_proto = out.File
	file_public_grpc_v1_fujin_proto_goTypes = nil
	file_public_grpc_v1_fujin_proto_depIdxs = nil
}
