syntax = "proto3";

package fujin.v1;

option go_package = "github.com/ValerySidorin/fujin/public/grpc/v1";

// Header
message Header {
  bytes key = 1;
  bytes value = 2;
}

// Connect request - must be sent first to initialize the stream
message ConnectRequest {
  uint32 correlation_id = 1;
  string stream_id = 2;  // Used as transactional ID for Kafka
}

// Connect response
message ConnectResponse {
  uint32 correlation_id = 1;
  string error = 2;
}

// Produce request
message ProduceRequest {
  uint32 correlation_id = 1;
  string topic = 2;
  bytes message = 3;
}

// Produce response
message ProduceResponse {
  uint32 correlation_id = 1;
  string error = 2;
}

// Subscribe request
message SubscribeRequest {
  uint32 correlation_id = 1;
  string topic = 2;
  bool auto_commit = 3;
}

// Subscribe response
message SubscribeResponse {
  uint32 correlation_id = 1;
  string error = 2;
  uint32 subscription_id = 3;  // Limited to 0-255 (byte) to match native protocol, but protobuf requires uint32
}

// Unsubscribe request
message UnsubscribeRequest {
  uint32 correlation_id = 1;
  uint32 subscription_id = 2;
}

// Unsubscribe response
message UnsubscribeResponse {
  uint32 correlation_id = 1;
  string error = 2;
}

// Message delivery
message Message {
  uint32 subscription_id = 1;
  bytes message_id = 2;
  bytes payload = 3;
}

// Ack request
message AckRequest {
  uint32 correlation_id = 1;
  repeated bytes message_ids = 2;
  uint32 subscription_id = 3;
}

// Ack response with per-message results
message AckResponse {
  uint32 correlation_id = 1;
  string error = 2;  // General error
  repeated AckMessageResult results = 3;  // Per-message results
}

// Ack result for individual message
message AckMessageResult {
  bytes message_id = 1;
  string error = 2;  // Error for this specific message (empty if success)
}

// Nack request
message NackRequest {
  uint32 correlation_id = 1;
  repeated bytes message_ids = 2;
  uint32 subscription_id = 3;
}

// Nack response with per-message results
message NackResponse {
  uint32 correlation_id = 1;
  string error = 2;  // General error
  repeated NackMessageResult results = 3;  // Per-message results
}

// Nack result for individual message
message NackMessageResult {
  bytes message_id = 1;
  string error = 2;  // Error for this specific message (empty if success)
}

// Empty response
message Empty {
  uint32 correlation_id = 1;
  string error = 2;
}

// Bidirectional streaming service for async request-response
service FujinService {
  // Bidirectional stream for all operations
  rpc Stream(stream FujinRequest) returns (stream FujinResponse);
}

// Union type for all requests
message FujinRequest {
  oneof request {
    ConnectRequest connect = 1;
    ProduceRequest produce = 2;
    SubscribeRequest subscribe = 3;
    UnsubscribeRequest unsubscribe = 4;
    AckRequest ack = 5;
    NackRequest nack = 6;
  }
}

// Union type for all responses
message FujinResponse {
  oneof response {
    ConnectResponse connect = 1;
    ProduceResponse produce = 2;
    SubscribeResponse subscribe = 3;
    UnsubscribeResponse unsubscribe = 4;
    Message message = 5;
    AckResponse ack = 6;
    NackResponse nack = 7;
  }
}